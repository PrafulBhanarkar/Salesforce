Developer Console --> File --> New --> Lightning Component --> Name: customSearch --> Submit
--> Replace with the following code:
<aura:component implements="forceCommunity:searchInterface">
<aura:attribute name="searchText" type="String" default=""/>
<div class="slds-form-element slds-lookup" data-select="single">
    <div class="slds-form-element__control">
        <div class="slds-input-has-icon slds-input-has-icon--right">
            <lightning:buttonIcon iconName="utility:search" variant="bare" onclick="{! c.handleClick }" alternativeText="Search" class="slds-input__icon" />
            <ui:inputText value="{!v.searchText}" class="slds-lookup__search-input slds-input" placeholder="Search" />
        </div>
    </div>
</div>
</aura:component>

Developer Console --> File --> New --> Apex Class --> Name: CustomSearchController  --> Ok
--> Replace with the following code:
public class CustomSearchController {
    @AuraEnabled
    public static List<String> searchForIds(String searchText) {
      return new List<String>{searchText};
    }
}

customSearch.cmp --> 
<aura:component implements="forceCommunity:searchInterface" controller="CustomSearchController">
    <aura:attribute name="searchText" type="String" default=""/>
    <div class="slds-form-element slds-lookup" data-select="single">
      <div class="slds-form-element__control">
        <div class="slds-input-has-icon slds-input-has-icon--right">
          <lightning:buttonIcon iconName="utility:search" variant="bare" onclick="{! c.handleClick }" alternativeText="Search" class="slds-input__icon" />
          <ui:inputText value="{!v.searchText}" class="slds-lookup__search-input slds-input" placeholder="Search" />
        </div>
      </div>
    </div>
</aura:component>

customSearch.cmp --> Controller --> Replace with the following code:
({
    handleClick : function(component, event, helper) {
      var searchText = component.get('v.searchText');
      var action = component.get('c.searchForIds');
      action.setParams({searchText: searchText});
      action.setCallback(this, function(response) {
        var state = response.getState();
        if (state === 'SUCCESS') {
          var ids = response.getReturnValue();
          console.log(ids);
        }
      });
      $A.enqueueAction(action);
    }
})

CustomSearchController.apxc --> Replace with the following code: 
public class CustomSearchController {
    @AuraEnabled
    public static List<String> searchForIds(String searchText) {
    List<List<SObject>> results = [FIND :searchText IN ALL FIELDS  RETURNING Account(Id), Contact(Id), Lead(Id)];
    List<String> ids = new List<String>();
    for (List<SObject> sobjs : results) {
      for (SObject sobj : sobjs) {
        ids.add(sobj.Id);
      }
    }
    return ids;
}
}

Developer Console --> File --> New --> Lightning Component --> Name: customSearchResultItem --> Submit
--> Replace with the following code:
<aura:component implements="force:hasRecordId" access="global">
    <aura:attribute name="record" type="Object"/>
    <aura:attribute name="simpleRecord" type="Object"/>
    <aura:attribute name="recordError" type="String"/>
    <force:recordData aura:id="recordLoader"
      recordId="{!v.recordId}"
      layoutType="COMPACT"
      targetRecord="{!v.record}"
      targetFields="{!v.simpleRecord}"
      targetError="{!v.recordError}"  />
    <!-- Display a header with details about the record -->
    <div class="slds-page-header" role="banner">
      <p class="slds-text-heading--label">{!v.simpleRecord.Name}</p>
      <h1 class="slds-page-header__title slds-m-right--small  slds-truncate slds-align-left"><a href="{!$Site.siteUrlPrefix + '/detail/' + v.simpleRecord.Id}">Go to details</a></h1>
    </div>
    <!-- Display Lightning Data Service errors, if any -->
    <aura:if isTrue="{!not(empty(v.recordError))}">
      <div class="recordError">
        <ui:message title="Error" severity="error" closable="true">
          {!v.recordError}
        </ui:message>
      </div>
    </aura:if>
</aura:component>

Developer Console --> File --> New --> Lightning Component --> Name: customSearchResultsList --> Submit
--> Replace with the following code:
<aura:component implements="forceCommunity:availableForAllPageTypes" access="global">
    <aura:attribute type="list" name="recordIds" />
    <aura:handler name="init" value="{!this}" action="{!c.init}"/>
    <h1>Search Results</h1>
    <aura:iteration items="{!v.recordIds}" var="id">
      <c:customSearchResultItem recordId="{!id}"/>
    </aura:iteration>
</aura:component>

customSearchResultsList --> Controller --> Replace with the following code:
({
  init: function(component, event, helper) {
    var idsJson = sessionStorage.getItem('customSearch--recordIds');
    if (!$A.util.isUndefinedOrNull(idsJson)) {
      var ids = JSON.parse(idsJson);
      component.set('v.recordIds', ids);
      sessionStorage.removeItem('customSearch--recordIds');
    }
  }
})

Experience Builder (gear icon at the top of page) --> New Page --> Standard Page --> +New Blank Page --> 1 full-width column --> Next
--> Name: Custom Search Results --> Create
Components --> customSearchResultsList (drag this component on to Content region) --> Note: drag the component you will see the regions where to add

customSearchController.js --> Replace with the following code:
({
    handleClick : function(component, event, helper) {
      var searchText = component.get('v.searchText');
      var action = component.get('c.searchForIds');
      action.setParams({searchText: searchText});
      action.setCallback(this, function(response) {
        var state = response.getState();
        if (state === 'SUCCESS') {
          var ids = response.getReturnValue();
          sessionStorage.setItem('customSearch--recordIds', JSON.stringify(ids));
          var navEvt = $A.get('e.force:navigateToURL');
          navEvt.setParams({url: '/custom-search-results'});
          navEvt.fire();
        }
      });
      $A.enqueueAction(action);
    }
})

customSearch --> click on Style --> 
.THIS .slds-input__icon{
   margin-top: -.8rem;
}
.THIS {
   padding: 0 10px;
}

customSearch --> click on Design --> 
<design:component label="Cloud Kicks Search"> </design:component>

Theme Layout Settings --> Search Component: Cloud Kicks Search (select)
